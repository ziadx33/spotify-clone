// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    password      String?
    accounts      Account[]
    sessions      Session[]
    Album         Playlist[]
    Track         Track[]
}

model VerificationToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

// Playlist & track models

enum PLAYLIST_SORT_BY {
    TITLE
    ARTIST
    ALBUM
    DATE_ADDED
    DURATION
    CUSTOM_ORDER
}

enum PLAYLIST_VIEW_AS {
    COMPACT
    LIST
}

model Playlist {
    id          String @id @default(cuid())
    title       String
    description String
    imageSrc    String @default("https://hvillzcyzejfbqcubhwi.supabase.co/storage/v1/object/public/images/no-image-src-album")

    creator   User   @relation(fields: [authorId], references: [id])
    creatorId String

    authorId String

    sortBy PLAYLIST_SORT_BY @default(DATE_ADDED)
    viewAs PLAYLIST_VIEW_AS @default(LIST)
    Track  Track[]
}

model Track {
    id        String   @id @default(cuid())
    title     String
    author    User     @relation(fields: [authorId], references: [id])
    authorId  String
    imgSrc    String
    trackSrc  String
    album     Playlist @relation(fields: [albumId], references: [id])
    albumId   String
    coreAlbum String
    dateAdded DateTime @default(now())
    duration  Int
}
